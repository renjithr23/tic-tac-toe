{"version":3,"sources":["Square.js","Board.js","PlayArea.js","App.js","serviceWorker.js","index.js"],"names":["Square","onClick","this","props","disabled","buttonStatus","value","React","Component","Board","className","squares","clickHandle","PlayArea","resetBoard","Array","fill","setState","currentUser","finished","winner","checkWinner","console","log","i","status","getResult","state","index","handleClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0ef9dd1e.chunk.js","sourcesContent":["import React from 'react';\n\nclass Square extends React.Component {\n  render() {\n    return <button onClick={this.props.onClick} disabled={this.props.buttonStatus}>\n        {this.props.value}\n    </button>;\n  }\n}\n\nexport default Square;\n","import React from \"react\";\nimport Square from \"./Square\";\n\nclass Board extends React.Component {\n  render() {\n\n    return (\n      <div className=\"board\">\n        <Square\n          value={this.props.squares[0]}\n          onClick={() => this.props.clickHandle(0)}\n          buttonStatus={this.props.buttonStatus}\n        />\n        <Square\n          value={this.props.squares[1]}\n          onClick={() => this.props.clickHandle(1)}\n          buttonStatus={this.props.buttonStatus}\n        />\n        <Square\n          value={this.props.squares[2]}\n          onClick={() => this.props.clickHandle(2)}\n          buttonStatus={this.props.buttonStatus}\n        />\n        <Square\n          value={this.props.squares[3]}\n          onClick={() => this.props.clickHandle(3)}\n          buttonStatus={this.props.buttonStatus}\n        />\n        <Square\n          value={this.props.squares[4]}\n          onClick={() => this.props.clickHandle(4)}\n          buttonStatus={this.props.buttonStatus}\n        />\n        <Square\n          value={this.props.squares[5]}\n          onClick={() => this.props.clickHandle(5)}\n          buttonStatus={this.props.buttonStatus}\n        />\n        <Square\n          value={this.props.squares[6]}\n          onClick={() => this.props.clickHandle(6)}\n          buttonStatus={this.props.buttonStatus}\n        />\n        <Square\n          value={this.props.squares[7]}\n          onClick={() => this.props.clickHandle(7)}\n          buttonStatus={this.props.buttonStatus}\n        />\n        <Square\n          value={this.props.squares[8]}\n          onClick={() => this.props.clickHandle(8)}\n          buttonStatus={this.props.buttonStatus}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from \"react\";\nimport Board from \"./Board\";\n\nclass PlayArea extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      currentUser: \"X\",\n      finished: false,\n      winner: null\n    };\n  }\n\n  handleClick(index) {\n    console.log(\"Index: \" + index);\n    const squares = this.state.squares;\n    squares[index] = this.state.currentUser;\n    this.setState({ squares: squares });\n    if (this.state.currentUser === \"X\") this.setState({ currentUser: \"O\" });\n    else this.setState({ currentUser: \"X\" });\n    this.checkWinner(squares);\n  }\n\n  resetBoard = () => {\n    const squares = Array(9).fill(null);\n    this.setState({\n      squares: squares,\n      currentUser: \"X\",\n      finished: false,\n      winner: null\n    });\n  };\n\n  checkWinner = squares => {\n    console.log(squares);\n\n    if (\n      squares[0] === squares[1] &&\n      squares[1] === squares[2] &&\n      squares[0] !== null\n    )\n      this.setState({ winner: squares[0], finished: true });\n    if (\n      squares[3] === squares[4] &&\n      squares[4] === squares[5] &&\n      squares[3] !== null\n    )\n      this.setState({ winner: squares[3], finished: true });\n\n    if (\n      squares[6] === squares[7] &&\n      squares[7] === squares[8] &&\n      squares[6] !== null\n    )\n      this.setState({ winner: squares[6], finished: true });\n\n    if (\n      squares[0] === squares[3] &&\n      squares[3] === squares[6] &&\n      squares[0] !== null\n    )\n      this.setState({ winner: squares[0], finished: true });\n\n    if (\n      squares[1] === squares[4] &&\n      squares[4] === squares[7] &&\n      squares[1] !== null\n    )\n      this.setState({ winner: squares[1], finished: true });\n\n    if (\n      squares[2] === squares[5] &&\n      squares[5] === squares[8] &&\n      squares[2] !== null\n    )\n      this.setState({ winner: squares[2], finished: true });\n\n    if (\n      squares[0] === squares[4] &&\n      squares[4] === squares[8] &&\n      squares[0] !== null\n    )\n      this.setState({ winner: squares[0], finished: true });\n\n    if (\n      squares[2] === squares[4] &&\n      squares[4] === squares[6] &&\n      squares[2] !== null\n    )\n      this.setState({ winner: squares[2], finished: true });\n\n    var status = false;\n    var i;\n    for (i = 0; i < 9; i++) {\n      if (squares[i] === null) {\n        status = true;\n        break;\n      }\n    }\n    if (!status) this.setState({ winner: null, finished: true });\n  };\n\n  getResult = () => {\n    if (this.state.finished) {\n      if (this.state.winner !== null)\n        return <p>Winner is: {this.state.winner}</p>;\n      else return <p>Game is draw!! Play again</p>;\n    } else {\n      return <p></p>;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"play-area\">\n        <div className=\"game-details\">\n          <p>Current Player : {this.state.currentUser}</p>\n          {this.getResult()}\n        </div>\n        <Board\n          squares={this.state.squares}\n          clickHandle={index => this.handleClick(index)}\n          buttonStatus={this.state.finished}\n        />\n        <button className=\"restart-button\" onClick={() => this.resetBoard()}>\n          {\" \"}\n          Reset Game\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default PlayArea;\n","import React from \"react\";\nimport \"./App.css\";\nimport PlayArea from \"./PlayArea\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"heading\">\n        <h1>Tic Tac Toe</h1>\n        <hr />\n      </div>\n      <PlayArea />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}